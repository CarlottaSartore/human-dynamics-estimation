cmake_minimum_required(VERSION 3.0)

project(human-forces-provider CXX)

## Find packages
find_package(YARP REQUIRED)

# Generate thrift files  
yarp_idl_to_dir("${CMAKE_CURRENT_SOURCE_DIR}/thrifts/Force6D.thrift" "${CMAKE_CURRENT_BINARY_DIR}/autogenerated" THRIFT_SOURCES THRIFT_HEADERS THRIFT_INCLUDE_DIRS)

add_library(human-forces-provider-data ${THRIFT_SOURCES} ${THRIFT_HEADERS})
target_include_directories(human-forces-provider-data SYSTEM PUBLIC ${THRIFT_INCLUDE_DIRS} ${YARP_INCLUDE_DIRS})
target_link_libraries(human-forces-provider-data YARP::YARP_init)
target_link_libraries(human-forces-provider-data YARP::YARP_OS)

## Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

set(SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp 
            ${CMAKE_CURRENT_SOURCE_DIR}/src/HumanForcesProvider.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/ForceReader.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/FTForceReader.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/PortForceReader.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/FrameTransformer.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/ConstFrameTransformation.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/src/RobotFrameTransformation.cpp
)

set(HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/HumanForcesProvider.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/ForceReader.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/FTForceReader.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/PortForceReader.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/FrameTransformer.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/ConstFrameTransformation.h
            ${CMAKE_CURRENT_SOURCE_DIR}/include/RobotFrameTransformation.h
)

## Declare a C++ executable
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

## Specify targets for the linkage
target_link_libraries(${PROJECT_NAME} human-forces-provider-data 
                                      YARP::YARP_OS
                                      YARP::YARP_init
                                      YARP::YARP_sig
                                      YARP::YARP_dev)

add_warnings_configuration_to_target(TARGETS ${PROJECT_NAME} PRIVATE)
