cmake_minimum_required(VERSION 3.0)

project(human-state-provider CXX)

## Find packages
find_package(YARP REQUIRED)
find_package(iDynTree REQUIRED)

# Generate thrift files  
yarp_idl_to_dir("${CMAKE_CURRENT_SOURCE_DIR}/thrifts/HumanState.thrift" "${CMAKE_CURRENT_BINARY_DIR}/autogenerated" THRIFT_STATE_SOURCES THRIFT_STATE_HEADERS THRIFT_STATE_INCLUDE_DIRS)

add_library("${PROJECT_NAME}-data" ${THRIFT_STATE_SOURCES} ${THRIFT_STATE_HEADERS})
target_include_directories("${PROJECT_NAME}-data" PUBLIC ${THRIFT_STATE_INCLUDE_DIRS})
target_include_directories("${PROJECT_NAME}-data" SYSTEM PUBLIC ${YARP_INCLUDE_DIRS})
target_link_libraries("${PROJECT_NAME}-data" YARP::YARP_OS)

## Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

set(SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/HumanStateProvider.cpp 
            ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)

set(HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/HumanStateProvider.h)

## Declare a C++ executable
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${YARP_INCLUDE_DIRS})

## Specify targets for the linkage
target_link_libraries(${PROJECT_NAME} "${PROJECT_NAME}-data" 
                                      inverse-kinematics
                                      yarp-experimental
                                      YARP::YARP_OS 
                                      YARP::YARP_init 
                                      YARP::YARP_dev
                                      iDynTree::idyntree-core
                                      iDynTree::idyntree-model)

# some more configurations for Clang and Gcc
if (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
  target_compile_options(${PROJECT_NAME} PRIVATE "$<$<CONFIG:Debug>:-pedantic;-Wc++11-extensions;-Wall>")
endif()
